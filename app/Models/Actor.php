<?php

/*
 * Copyright (C) 2014 - 2025, Biospex
 * biospex@gmail.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

namespace App\Models;

use IDigAcademy\AutoCache\Traits\Cacheable;
use Illuminate\Database\Eloquent\Factories\HasFactory;

/**
 * Class Actor
 *
 * Represents an actor entity within the application system. Actors are external
 * services or systems that can process expeditions and handle various workflows.
 * This model manages actor configurations, relationships, and provides query
 * scopes for filtering specific actor types.
 *
 * Key Features:
 * - Supports caching for improved performance
 * - Provides scopes for active, Zooniverse, and GeoLocate actors
 * - Maintains relationships with workflows, downloads, contacts, and expeditions
 * - Handles actor-specific configurations and states
 */
class Actor extends BaseEloquentModel
{
    use Cacheable, HasFactory;

    /**
     * The name of the database table associated with the model.
     *
     * @var string
     */
    protected $table = 'actors';

    /**
     * The attributes that are mass assignable.
     *
     * @var array<string>
     */
    protected $fillable = [
        'title',    // The display title/name of the actor
        'url',      // The URL endpoint for the actor service
        'class',    // The PHP class name that handles this actor's functionality
    ];

    /**
     * Get the relations that should be cached for performance optimization.
     *
     * This method defines which Eloquent relationships should be cached
     * when using the Cacheable trait to improve query performance.
     *
     * @return array<string> Array of relationship names to be cached
     */
    protected function getCacheRelations(): array
    {
        return ['workflows', 'downloads', 'contacts', 'expeditions'];
    }

    /**
     * Scope a query to only include active records.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query  The query builder instance.
     * @return \Illuminate\Database\Eloquent\Builder The modified query builder.
     */
    public function scopeActive(\Illuminate\Database\Eloquent\Builder $query): \Illuminate\Database\Eloquent\Builder
    {
        return $query->where('active', 1);
    }

    /**
     * Scope a query to only include the Zooniverse actor.
     *
     * This scope filters the query to return only the actor configured
     * for Zooniverse integration based on the application configuration.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query  The query builder instance
     * @return \Illuminate\Database\Eloquent\Builder The modified query builder
     */
    public function scopeZooniverse($query): mixed
    {
        return $query->where('actors.id', config('zooniverse.actor_id'));
    }

    /**
     * Scope a query to only include the GeoLocate actor.
     *
     * This scope filters the query to return only the actor configured
     * for GeoLocate integration based on the application configuration.
     *
     * @param  \Illuminate\Database\Eloquent\Builder  $query  The query builder instance
     * @return \Illuminate\Database\Eloquent\Builder The modified query builder
     */
    public function scopeGeolocate($query): mixed
    {
        return $query->where('actors.id', config('geolocate.actor_id'));
    }

    /**
     * Define a many-to-many relationship with Workflow models.
     *
     * An actor can be associated with multiple workflows, and each workflow
     * can have multiple actors. This relationship uses a custom pivot model
     * (ActorWorkflow) to manage additional pivot table data.
     */
    public function workflows(): \Illuminate\Database\Eloquent\Relations\BelongsToMany
    {
        return $this->belongsToMany(Workflow::class)->using(ActorWorkflow::class);
    }

    /**
     * Define a one-to-many relationship with Download models.
     *
     * An actor can have multiple downloads associated with it, typically
     * representing files or data exports generated by the actor's processes.
     */
    public function downloads(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(Download::class);
    }

    /**
     * Define a one-to-many relationship with ActorContact models.
     *
     * An actor can have multiple contact records, allowing for different
     * types of contact information or multiple contact persons per actor.
     */
    public function contacts(): \Illuminate\Database\Eloquent\Relations\HasMany
    {
        return $this->hasMany(ActorContact::class);
    }

    /**
     * Define a many-to-many relationship with Expedition models.
     *
     * An actor can process multiple expeditions, and each expedition can be
     * processed by multiple actors. The pivot table includes additional fields
     * for tracking processing state, totals, errors, order, and expert status.
     */
    public function expeditions(): \Illuminate\Database\Eloquent\Relations\BelongsToMany
    {
        return $this->belongsToMany(Expedition::class, 'actor_expedition')
            ->withPivot('id', 'expedition_id', 'actor_id', 'state', 'total', 'error', 'order', 'expert')
            ->orderBy('order')
            ->withTimestamps();
    }
}
