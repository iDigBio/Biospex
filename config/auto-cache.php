<?php

/*
 * Copyright (C) 2022 - 2025, iDigInfo
 * amast@fsu.edu
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * AutoCache Configuration
 *
 * This configuration file defines the settings for the AutoCache package,
 * which provides automatic caching capabilities for Eloquent models and queries.
 */
return [
    /**
     * Enable or disable AutoCache functionality
     *
     * When set to false, all caching operations will be bypassed
     * and queries will execute normally without caching.
     */
    'enabled' => env('AUTO_CACHE_ENABLED', true),

    /**
     * Cache store to use for AutoCache
     *
     * Specifies which cache driver to use for storing cached data.
     * Supported values: 'redis', 'memcached', 'array', 'file', 'database'
     */
    'store' => env('AUTO_CACHE_STORE', 'redis'),

    /**
     * Default Time To Live (TTL) for cached items
     *
     * The default duration in seconds that cached items will be stored
     * before they expire. Individual cache operations can override this value.
     */
    'ttl' => env('AUTO_CACHE_TTL', 3600),

    /**
     * Cache key prefix
     *
     * A prefix that will be prepended to all cache keys generated by AutoCache
     * to avoid conflicts with other cached data in the same store.
     */
    'prefix' => env('AUTO_CACHE_PREFIX', 'auto-cache:laravel:'),

    /**
     * Gate caching configuration
     *
     * Settings specific to caching Laravel Gate authorization checks
     */
    'gate' => [
        /**
         * Enable or disable Gate caching functionality
         *
         * When set to false, Gate checks will bypass caching and execute normally.
         * This setting is independent of the main 'enabled' setting above.
         */
        'enabled' => env('AUTO_CACHE_GATE_ENABLED', true),

        /**
         * Cache TTL for Gate results
         *
         * The duration in seconds that Gate authorization results will be cached.
         * If not set, it will use the main TTL setting above.
         */
        'ttl' => env('AUTO_CACHE_GATE_TTL', null),

        /**
         * Cache invalidation events
         *
         * List of events that should trigger Gate cache invalidation.
         * This helps ensure cached permissions are cleared when user roles/permissions change.
         */
        'invalidation_events' => [
            'eloquent.saved: *',
            'eloquent.updated: *',
            'eloquent.deleted: *',
            'user.role_changed',
            'user.permission_changed',
        ],

        // Admin context detection settings
        'skip_admin_context' => true,

        // Route patterns that should skip caching (supports Laravel route patterns)
        'admin_route_patterns' => [
            'nova/*',
            'nova-api/*',
            // 'admin/*',           // This catches everything under /admin/
            'admin/nova/*',      // More specific for Nova UI
            'admin/nova-api/*',  // More specific for Nova API
            'filament/*',
            'admin/filament/*',
            'dashboard/*',
            'admin/dashboard/*',
        ],

        // URL paths that should skip caching (substring matches)
        'admin_url_paths' => [
            '/nova/',
            '/admin/nova/',      // Only skip Nova under admin
            '/filament/',
            '/admin/filament/',  // Only skip Filament under admin
            '/dashboard/',
            '/admin/dashboard/',
        ],

        // Service provider classes that indicate admin packages are installed
        'admin_package_classes' => [
            '\Laravel\Nova\NovaServiceProvider',
            '\Filament\FilamentServiceProvider',
            '\Backpack\CRUD\BackpackServiceProvider',
            '\Encore\Admin\AdminServiceProvider',
        ],

        // Dynamic admin package detection (attempts to get routes from known packages)
        'dynamic_detection' => [
            'enabled' => true,
            'packages' => [
                'filament' => [
                    'facade_class' => '\Filament\Facades\Filament',
                    'method' => 'getPanels',
                    'path_method' => 'getPath',
                ],
                // Users can add more dynamic detection configs here
            ],
        ],
    ],
];
